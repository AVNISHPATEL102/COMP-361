# -*- coding: utf-8 -*-
"""Chapter1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/tgteacher/numerical-methods/blob/master/notebooks/Chapter1.ipynb

# Chapter 1: Introduction to Python

The goal of this chapter is to provide the required Python programming skills to implement the algorithms presented in the course. We will come back to it at the beginning of every lecture, whenever new concepts are needed.

## Motivations for Python

* Python is very popular in science and engineering: check [SciPy](https://scipy.org), [scikit-learn](http://scikit-learn.org)
* Python is free software ([as in freedom](https://www.fsf.org))
* Python is portable, available for all major operating systems
* Python is a versatile language, "the second best language for everything"
* Python has a lively online community, active on [Stackoverflow](https://stackoverflow.com) and many other forums

## Limitations relevant to this course
* Can be slower than Matlab in some cases

## Other notes
* Python is an object-oriented language
* Python is an interpreted language

Here we focus on Python 3 (latest version is 3.7). Be careful, there are important differences between Python 3 and Python 2.

## Core Python

### Variables

Variables are typed dynamically:
"""

b = 1 # b is an integer
print(b)

b = 2.0*b # now be is a float
print(b)

"""### Strings"""

astring = 'Hello'
another_string = ", World!"
print(astring+another_string) # Concatenation

"""#### Slicing"""

print(another_string[2:4])

print(another_string[2:-1]) # Slicing again

"""#### Strings are immutable"""

astring[0]
astring[0]='h'

"""### Tuples

Tuples are sequences of arbitrary objects. They are also immutable.
"""

t = (1, 'one', 'un') # this is a tuple
_, b, _ = t # unpacking
print(b)

print(t[1])

words = t[1:] # slicing
print(words)

"""### Lists

Lists are similar to tuples but they are mutable.
"""

a = [1, 'one']
a.append('un')
print(a)

a.insert(0, '0') # insertion
print(a)

print(len(a)) # length

a[1:] = ['foo', 'bar', 'coin'] # slicing and modification
print(a)

"""Lists can also be used to define matrices, but numpy arrays are much more convenient (see below).

More on [slicing](https://stackoverflow.com/questions/509211/understanding-pythons-slice-notation).

#### Exercises on slicing

Let a be a list:
1. Create a list containing all the elements in a, except the last 2.
2. Create a list containing only the first 2 elements of a, in reverse.
"""

a = [1, 2, 3, 4, 5]
b = a[:-2]
print(b)

c = a[1::-1]
print(c)

"""### Conditionals"""

# indentation is part of the language, not just style!
a = 1
if a < 0:
    print('negative')
else:
    print('positive or null')

"""### Error Control

Python has exception handling:
"""

try:
    a = 1
    a / 0.0
except ZeroDivisionError as e:
    print("you can't do that!")

"""### Assertions

Assertions will raise an error when their argument is False, they are a great way to safeguard your code:
"""

def sqrt(x):
    assert(x>=0), "you can't do that either!"
    return x**(0.5)

sqrt(2)

sqrt(-2)

"""### Loops

The for loop requires a sequence of elements to loop over:
"""

# such as a list
a = ['a', 1, 2]
for x in a:
    print(x)

# or a sequence returned by 'range'
for i in range(5):
    print(i)

"""### Type conversion"""

# String to int
a = '1'
b = '2'
print(a+b)

print(int(a)+int(b))

"""### References

Mutable objects are references
"""

a = ['a', 'b', 'c']
b = a # b is a reference, i.e., an 'alias' for a
b[0] = 'qwerty' # Modify b
print(a) # a is modified too

c = a[:] # c is an independent copy of a
c[0] = 'trewq' # Modify c
print(a) # a isn't modified

"""### Functions

A function is defined using the 'def' keyword:
"""

def my_great_function(a, b, c):
    return (a+b)*c

my_great_function(1, 2, 3)

def my_great_function(a, b, c, verbose=False): # last parameter has a default value
    if verbose:
        print("We will do something great")
    return (a-b)*c

my_great_function(1, 2, 3)

my_great_function(1, 2, 3, True)

"""### Exercise: what's the value of b after my_function was called?"""

def my_function(x, y):
    x = x + y # also written x+= y
    
b = 3
my_function(b, 2)
print(b)

def my_function(x, y):
    x.append(y)
    
b = [ 3 ]
my_function(b, 2)
print(b)

"""### Mathematical functions and modules

#### Core functions
"""

abs(-1)

max(1, 2, 3)

"""#### *math* module
Most functions are in the math module. A module is imported like this:
"""

import math
math.log(1)

"""Specific functions can also be imported:"""

from math import sin
sin(0)

"""All the functions in a module can be imported:"""

from math import *
cos(0)

"""And in case of name collisions between modules, functions can also be renamed:"""

from math import sqrt as the_right_sqrt
the_right_sqrt(-1)

"""#### *numpy* Module

This module introduces array objects similar to lists, but that can be manipulated through numerous functions of the module.

The size of an array is immutable, array elements are mutable.

#### Creating an array
"""

from numpy import array
a = array([1, 2, 3]) # a 1x3 array
print(a)

b = array([[0, 1, 2],[3, 4, 5]]) # a 2x3 array
print(b)

"""#### Shape of an array"""

from numpy import shape
shape(b) # Getting the shape of an array

"""#### Creating zeros, ones and ranges"""

from numpy import zeros
c = zeros((2,3), dtype=int) # a 2x3 array filled with 0s
print(c)

from numpy import ones
d = ones(10)*7
print(d)

from numpy import arange
e = arange(1, 100)
print(e)

"""#### Modifying an array"""

c[1, 2] = 7
c[0, 0] = 9
print(c)

"""#### Slicing"""

c[1,:] # Access row 1

c[:,1] # Access column 1

c[1, 1:] # All the elements of row 1 except the first one

# Slice modification
a = [0, 1, 2]
a[1:2] = ['a', 'b']
print(a)
c[:,1] = [4, 6]
print(c)

"""#### Exercise

Write a function that returns an array passed as an argument, except row $i$.
"""

from numpy import *
def remove_row(a, i):
    n, m = shape(a)
    b = zeros((n-1, m))
    for k in range(n-1):
        if k < i:
            b[k] = a[k]
        else:
            b[k] = a[k+1]
    return b

a = array([[0,1],[1,2],[2,3]])
print(remove_row(a, 1))

shape(a)

"""#### Operations on arrays

Arithmetic operations are *broadcast* to all the elements in the array:
"""

a = array([1, 2, 3])
a + 1

a / 2

"""Mathematical functions available in numpy are also broadcast:"""

from numpy import sqrt, cos, sin
from math import sqrt
sqrt(a)

cos(a)

sin(a)

"""Functions imported from the math module won't work on the array:"""

from math import sqrt
sqrt(a)

sqrt(a[0]) # of course this works!

"""#### Array functions

There are many functions in numpy to perform operations on arrays:
"""

from numpy import *
a = array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
diagonal(a)

sum(a)

b = array([1, 2, 3])
c = array([4, 5, 6])
dot(b, c)

"""#### Linear algebra module"""

from numpy import array
from numpy.linalg import inv

a = array([[1, 2, 3], [4, 5, 6], [7, 8, 10]])
inv(a) # inverse of a

"""#### Copying arrays

An array is mutable, therefore it is passed as a reference (alias) to functions:
"""

from numpy import array
def do_stuff(x):
    x[0, 0] = 99999
a = array([[1, 2, 3], [4, 5, 6], [7, 8, 10]])
do_stuff(a) # this modifies a itself
print(a)

"""To work on an individual copy, use the copy function in the numpy module:"""

from numpy import copy, array
def do_stuff(a):
    a = a.copy()
    a[0, 0] = 99999
a = array([[1, 2, 3], [4, 5, 6], [7, 8, 10]])
do_stuff(a) # this doesn't modify a
print(a)

"""#### Vectorizing Algorithms

Sometimes the broadcasting properties of the mathematical functions in the numpy module can be used to replace loops. For instance, consider the following expression:
$$
s = \sum_{i=1}^{100} i^2
$$

Procedural code:
"""

s = 0
for i in range(1, 101):
    s += i**2
print(s)

"""Vectorized code:"""

from numpy import *
a = arange(101)
s = sum(power(a, 2))
print(s)

"""## Plotting with *matplotlib*

As part of the SciPy ecosystem, matplotlib works nicely with numpy arrays:
"""

from numpy import ones, arange, cos
import matplotlib.pyplot as plt

x = arange(6)
y = cos(arange(6)/6)
plt.plot(x, y)
plt.show()

"""### Getting help

* Python's built-in help (based on docstrings)
"""

from numpy import tanh
help(tanh)

"""* [Python reference](https://docs.python.org/3/index.html)
* [Numpy documentation](http://www.scipy.org)
* [Stackoverflow](https://stackoverflow.com)

As with any programming language, practice is the key! The assignments will help you with that.
"""